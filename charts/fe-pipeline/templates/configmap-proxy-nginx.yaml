{{- $fullName := include "fe-pipeline.fullname" . -}} 

# Copyright (c) 2020 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $fullName }}-proxy-config
  labels:
    {{- include "fe-pipeline.labels" . | nindent 4 }}
data:
  default.conf: |-
    # nginx.vh.default.conf  --  docker-openresty
    #
    # This file is installed to:
    #   `/etc/nginx/conf.d/default.conf`
    #
    # It tracks the `server` section of the upstream OpenResty's `nginx.conf`.
    #
    # This config (and any other configs in `etc/nginx/conf.d/`) is loaded by
    # default by the `include` directive in `/usr/local/openresty/nginx/conf/nginx.conf`.
    #
    # See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
    #

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }


    server {
        listen       80;
        server_name  {{ .Values.hostname }};


        location / {
            proxy_pass   http://{{ $fullName }}-manager:3000;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

    }

        
    server {
        listen       80;
        server_name  ~^(.*)\.ms\.(.*)$;

        set $fe_pipeline_project_id $1;
        set $fe_pipeline_manager_host $2;

        location / {
            root /app/fe-pipeline-home/data/ms-public/$fe_pipeline_project_id;
            index index.html index.htm;
        }

        error_page  404 =404 @fallback404;

        location @fallback404 {
            root /app/fe-pipeline-home/data/ms-public/$fe_pipeline_project_id;
            rewrite ^(.*)$ /index.html break;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/local/openresty/nginx/html;
        }

    }

    upstream minio-upstream { 
        server minio:9000; # {{ default "minio:9000" (.Values.minio.endpoint) }}; 
    }
    
    server {
        listen       80;
        server_name  ~^(.*)\.minio\.(.*)$;

        set $fe_pipeline_project_key $1;
        set $fe_pipeline_manager_host $2;

        set $fe_pipeline_project_path "";

        location @fallback404 {

            proxy_intercept_errors off;
            proxy_pass http://minio-upstream/$fe_pipeline_project_path/index.html;

        }

        location / {


            # set $fe_pipeline_project_path "";
            # set_by_lua
            # rewrite_by_lua
            rewrite_by_lua '

                local function close_redis(red)  
                    if not red then  
                        return  
                    end  
                    local ok, err = red:close()  
                    if not ok then  
                        -- ngx.say("close redis error : ", err)  
                    end  
                end  
                
                local redis = require("resty.redis")  
                
                --创建实例  
                local red = redis:new()  
                --设置超时（毫秒）  
                red:set_timeout(1000)  
                --建立连接  
                -- local ip = "redis-server-master" -- "{{ default ( printf "%s-master.%s.svc.cluster.local"  (index .Values "redis" "fullnameOverride") ( .Release.Namespace )) .Values.redis.endpoint_ip }}"
                local ip = os.getenv("{{ (index .Values "redis" "fullnameOverride") | snakecase | upper }}_MASTER_SERVICE_HOST") -- "redis-server-master.fe-pipeline.svc.cluster.local"
                local port = 6379
                if not ip then
                    ip = "{{ default ( printf "%s-master.%s.svc.cluster.local"  (index .Values "redis" "fullnameOverride") ( .Release.Namespace )) .Values.redis.endpoint_ip }}"
                    ip = "{{ default ("6379") .Values.redis.endpoint_port }}"
                end
                local ok, err = red:connect(ip, port)  
                if not ok then  
                    ngx.say("connect to redis error : ", err)  
                    close_redis(red)  
                    return ngx.exit(501)
                end 

                --调用API获取数据  
                local resp, err = red:get(ngx.var.fe_pipeline_project_key)  
                if not resp then  
                    ngx.say("get msg error : ", err)  
                    close_redis(red) 
                    return ngx.exit(501)
                end  
                --得到的数据为空处理  
                if resp == ngx.null then  
                    resp = string.gsub(ngx.var.fe_pipeline_project_key, "%-%-", "/")   --比如默认值
                else
                    resp = string.sub(resp, 2, -2 )   --比如默认值  
                end  
                -- ngx.say("msg : ", resp)
                
                close_redis(red)

                ngx.var.fe_pipeline_project_path =  "bucket/" .. resp

                -- return "bucket/" .. ngx.var.fe_pipeline_project_key

            ';

            proxy_pass http://minio-upstream/$fe_pipeline_project_path$uri;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            proxy_intercept_errors on;

            error_page  404 =404 @fallback404;
            error_page  307 301 302 300 =403 @fallback403;

        }


        location @fallback403 {
            add_header Content-Type "text/plain;charset=utf-8"; 
            return 403 "<h1>403</h1>";
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/local/openresty/nginx/html;
        }

    }